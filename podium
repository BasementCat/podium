#!/usr/bin/env python

import sys
import os
import json

TEMPLATE_DIRS = ['./templates']

def ask(question, empty=False, options=None, default=None):
    prompt = ''
    if question:
        prompt = question + ' '
        if options:
            prompt += '(' + '/'.join([str(o) for o in options]) + ') '
        if default:
            prompt += '[' + str(default) + '] '
    while True:
        out = raw_input(prompt)
        if not out:
            if default:
                return default
            if not empty:
                continue
        if options and out not in options:
            continue
        return out or None

def ask_bool(question, default=None):
    dfl = None
    if default is True:
        dfl = 'y'
    elif default is False:
        dfl = 'n'
    out = ask(question, False, ['y', 'n'], dfl)
    if out == 'y':
        return True
    return False

def load_template(name):
    """Load a template based on its name.

    Look in the configured template directories for the named template and load
    its config.json, returning the parsed JSON.  If it depends on other
    templates, load them as well and merge in their configurations.
    """
    tpl_config_file = None
    tpl_config = None
    for dirname in TEMPLATE_DIRS:
        candidate = os.path.join(dirname, name)
        if os.path.exists(candidate):
            tpl_config_file = os.path.join(candidate, 'config.json')
            if not os.path.exists(tpl_config_file):
                raise Exception("Found template '%s' at '%s' but it lacks config.json" % (name, candidate))
            try:
                with open(tpl_config_file, 'r') as fp:
                    tpl_config = json.load(fp)
            except ValueError:
                raise Exception("Can't load '%s' for template '%s': invalid JSON" % (tpl_config_file, name))
            data_candidate = os.path.join(candidate, 'data')
            tpl_config['_data_dir'] = data_candidate if os.path.exists(data_candidate) else None
            break

    tpl_config['_sub_templates'] = []
    if 'extends' in tpl_config:
        for sub_tpl_name, sub_tpl_params in tpl_config['extends'].items():
            try:
                sub_tpl_config = load_template(sub_tpl_name)
            except Exception as e:
                raise Exception("Can't load dependency '%s' of '%s': %s", sub_tpl_name, name, str(e))

            if 'include' in sub_tpl_params:
                sub_tpl_config['variables'] = [
                    var
                    for var
                    in sub_tpl_config['variables']
                    if var['name'] in sub_tpl_params['include']
                ]
            elif 'exclude' in sub_tpl_params:
                sub_tpl_config['variables'] = [
                    var
                    for var
                    in sub_tpl_config['variables']
                    if var['name'] not in sub_tpl_params['include']
                ]
            tpl_config['_sub_templates'].append(sub_tpl_config)

    tpl_config['internal_name'] = name
    return tpl_config

def ask_config(config):
    out = {config['internal_name']: {}}
    for sub_tpl_config in config['_sub_templates']:
        out[sub_tpl_config['internal_name']] = ask_config(sub_tpl_config)
    if 'variables' in config:
        for opt in config['variables']:
            # Some options may prevent this question from being asked
            if 'onlyif' in opt:
                if (opt['onlyif'] not in out[config['internal_name']]) or (not out[config['internal_name']][opt['onlyif']]):
                    continue
            if 'unless' in opt:
                if (opt['unless'] in out[config['internal_name']]) and out[config['internal_name']][opt['unless']] is not None:
                    continue

            caster = str
            if 'type' in opt:
                try:
                    caster = getattr(__builtins__, opt['type'])
                except AttributeError:
                    raise Exception("Invalid variable type '%s' for '%s' in '%s'" % (opt['type'], opt['name'], config['name']))
            while True:
                if caster is bool:
                    value = ask_bool(opt['description'], opt['default'] if 'default' in opt else None)
                    break
                else:
                    value = ask(
                        opt['description'],
                        empty=opt['empty'] if 'empty' in opt else False,
                        options=opt['options'] if 'options' in opt else None,
                        default=opt['default'] if 'default' in opt else None,
                    )
                    try:
                        if value is not None:
                            value = caster(value)
                        break
                    except ValueError:
                        print "A valid %s is required" % (caster.__name__,)

            # The value could potentially come from another location
            if 'source' in opt:
                # In this case, the option must be a boolean - and if it's not true we don't do anything
                if not value or opt['source'] not in out[config['internal_name']]:
                    continue
                value = out[config['internal_name']][opt['source']]

            # The value could be assigned to another key
            key = opt['name']
            if 'destination' in opt:
                key = opt['destination']

            out[config['internal_name']][key] = value
    return out

if __name__ == '__main__':
    config = load_template('library')
    import pprint
    pprint.pprint(ask_config(config))
